<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
   http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="cn.appsys.dao,cn.appsys.service"/>
    <!--spring的一键式配置-->
    <mvc:annotation-driven/>
    <!--配置一个环境参数  指定spring的配置文件所在的位置-->

    <!--在spring中配置数据源-->
    <context:property-placeholder location="classpath:database.properties"/>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${user}"/>
        <property name="password" value="${password}"/>
        <property name="initialSize" value="${initialSize}"/>
        <property name="maxActive" value="${maxActive}"/>
        <property name="maxIdle" value="${maxIdle}"/>
        <property name="maxWait" value="${maxWait}"/>
        <property name="minIdle" value="${minIdle}"/>
        <property name="removeAbandoned" value="true"/>
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
        <!--sql的心跳机制-->
        <!---->
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
        <property name="validationQuery" value="select 1"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="numTestsPerEvictionRun" value="${maxActive}"/>
    </bean>

    <!--sqlSessionFactory  核心关键对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--myvatis的配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--配置SQL映射文件-->
        <!--<property name="mapperLocations">-->
        <!--<list>-->
        <!--<value>classpath:cn/smbms/dao/**/*.xml</value>-->
        <!--</list>-->
        <!--</property>-->
    </bean>

    <!--SqlSessionTempalte-->

    <!--<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">-->
    <!--<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
    <!--</bean>-->
    <!--userServlce的been-->
    <!--<bean id="userMapper" class="cn.smbms.dao.user.lmpl.UserMapperImpl">-->
    <!--<property name="session" ref="sqlSession"/>-->
    <!--</bean>-->

    <!--数据采集器 MapperfactroyBean   作用替代原先的 SqlSession.getmapper(****.class)-->
    <!--<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
    <!--&lt;!&ndash;接口和对应sql映射文件一样才可以&ndash;&gt;-->
    <!--<property name="mapperInterface" value="cn.UserMapper"/>-->
    <!--<property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
    <!--</bean>-->


    <!--项目中会有 很多映射器 可以借助自动扫描 来简化这种映射器的配置-->

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.appsys.dao"/>
    </bean>
    <!--<bean id="userService" class="cn.smbms.service.user.impl.UserServiceimpl">-->
    <!--<property name="userMapper" ref="userMapper"/>-->
    <!--</bean>-->
    <!--注解简化been的配置-->


    <!--================================================================================================添加-->
    <!--p配置事务管理器-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--配置病指定 事务增强-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!--去制定规则-->
        <!--在什么方法上 什么样式的规则-->
        <tx:attributes>
            <!--业务层的方法-->
            <tx:method name="smbms*" propagation="REQUIRED" isolation="DEFAULT" no-rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

    <!--使用 sop将 事务增强 和切入点 结合-->
    <aop:config>
        <aop:pointcut id="pointcut" expression="execution(* cn.appsys.service..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"></aop:advisor>
    </aop:config>
    <!--aop的一个自动代理-->
    <aop:aspectj-autoproxy/>
</beans>